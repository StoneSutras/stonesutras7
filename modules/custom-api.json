{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Custom API",
        "description": "This is the place to add your own path endpoints"
    },
    "servers": [
        {
            "description": "Endpoint for testing on localhost",
            "url":"http://localhost:8080/exist/apps/stonesutras7"
        }
    ],
    "components": {
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            },
            "cookieAuth": {
                "type": "apiKey",
                "name": "teipublisher.com.login",
                "in": "cookie"
            }
        }
    },
    "paths": {
		"/{id}": {
			"get": {
				"summary": "Retrieve the HTML template used for displaying a document",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"tags": ["view"],
				"operationId": "custom:resolve",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Relative path to the document",
						"required": true,
						"schema": {
							"type": "string",
							"example": "test/orlik_to_serafin.xml"
						},
						"allowReserved": true
					},
					{
						"name": "template",
						"in": "query",
						"description": "Name of the template to be used. Overwrites any default template setting.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "view",
						"in": "query",
						"schema": {
							"type": "string",
							"enum": ["page", "div", "single"]
						},
						"example": "div",
						"description": "The view type used by the main view which displays the document, e.g. 'page' or 'div'. This has an influence on the generated links, which need to differ when linking to a page rather than a section."
					},
					{
						"name": "odd",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML view for the document",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "The document was not found",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "An error occurred",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
        "/inscriptions/{id}": {
			"get": {
				"summary": "Retrieve the HTML template used for displaying a document",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"tags": ["view"],
				"operationId": "custom:resolve",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Relative path to the document",
						"required": true,
						"schema": {
							"type": "string",
							"example": "test/orlik_to_serafin.xml"
						},
						"allowReserved": true
					},
					{
						"name": "template",
						"in": "query",
						"description": "Name of the template to be used. Overwrites any default template setting.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "view",
						"in": "query",
						"schema": {
							"type": "string",
							"enum": ["page", "div", "single"]
						},
						"example": "div",
						"description": "The view type used by the main view which displays the document, e.g. 'page' or 'div'. This has an influence on the generated links, which need to differ when linking to a page rather than a section."
					},
					{
						"name": "odd",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML view for the document",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "The document was not found",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "An error occurred",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
        "/sites/{site}": {
			"get": {
				"summary": "Retrieve HTML page",
				"description": "Retrieve an HTML page expanded through eXist templating. This is used to load the top-level HTML pages, e.g. `index.html`.",
				"tags": ["view"],
				"operationId": "vapi:html",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
                    {
                        "name": "site",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
					{
						"name": "file",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
                            "default": "site"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML of the page",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "The document was not found",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
        "/characters": {
			"get": {
				"summary": "Retrieve the HTML template used for displaying a document",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"tags": ["view"],
				"operationId": "vapi:html",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "file",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
                            "default": "characters"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML view for the document",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "The document was not found",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "An error occurred",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
        "/characters/{id}": {
			"get": {
				"summary": "Retrieve the HTML template used for displaying a document",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"tags": ["view"],
				"operationId": "vapi:html",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID (unicode codepoint) of the character",
						"required": true,
						"schema": {
							"type": "string",
							"example": "6B32"
						},
						"allowReserved": true
					},
					{
						"name": "file",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
                            "default": "char"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML view for the document",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "The document was not found",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "An error occurred",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
        "/api/sites": {
            "get": {
                "summary": "Get list of sites",
                "operationId": "api:sites",
				"parameters": [
					{
						"name": "language",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
                "responses": {
                    "200":{
                        "description": "List of sites",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
		"/api/articles": {
            "get": {
                "summary": "Get list of sites",
                "operationId": "api:research-articles",
				"parameters": [
					{
						"name": "language",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "volume",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"default": "all"
						}
					}
				],
                "responses": {
                    "200":{
                        "description": "List of sites",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
		"/articles/{id}": {
			"get": {
				"summary": "Retrieve the HTML template used for displaying a document",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"tags": ["view"],
				"operationId": "custom:resolve",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID (unicode codepoint) of the character",
						"required": true,
						"schema": {
							"type": "string",
							"example": "6B32"
						},
						"allowReserved": true
					},
					{
						"name": "template",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
                            "default": "article.html"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML view for the document",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "The document was not found",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"500": {
						"description": "An error occurred",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/api/search/article-facets": {
			"get": {
				"summary": "List facets",
				"description": "Return a list of facet counts for current search results",
				"operationId": "custom:article-facets",
				"tags": ["search"],
				"responses": {
					"200": {
						"description": "Facets returned",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/api/search/catalog-facets": {
			"get": {
				"summary": "List facets",
				"description": "Return a list of facet counts for current search results",
				"operationId": "custom:catalog-facets",
				"tags": ["search"],
				"responses": {
					"200": {
						"description": "Facets returned",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/api/search/place-facets": {
			"get": {
				"summary": "List facets",
				"description": "Return a list of facet counts for current search results",
				"operationId": "custom:place-facets",
				"tags": ["search"],
				"responses": {
					"200": {
						"description": "Facets returned",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/api/search/image-facets": {
			"get": {
				"summary": "List facets",
				"description": "Return a list of facet counts for current search results",
				"operationId": "custom:image-facets",
				"tags": ["search"],
				"responses": {
					"200": {
						"description": "Facets returned",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
        "/api/inscriptions/json": {
            "get": {
                "summary": "Get list of inscriptions for site",
                "operationId": "api:inscription-table",
                "parameters": [
                    {
                        "name": "start",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
					{
						"name": "language",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "search",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
                ],
                "responses": {
                    "200":{
                        "description": "List of inscriptions",
                        "content": {
                            "application/json":{
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/inscriptions/{site}": {
            "get": {
                "summary": "Get list of inscriptions for site",
                "operationId": "api:inscriptions",
                "parameters": [
                    {
                        "name": "site",
                        "in": "path",
                        "required": true,
                        "schema":{
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "List of inscriptions",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/layout/{id}": {
            "get": {
                "summary": "Retrieve a layout view of the text",
                "operationId": "layout:svg",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema":{
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "List of inscriptions",
                        "content": {
                            "image/svg+xml":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
		"/api/iiif/{id}.manifest": {
            "get": {
                "summary": "Retrieve IIIF presentation manifest for inscription",
                "operationId": "iiif:manifest",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema":{
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "IIIF manifest",
                        "content": {
                            "application/ld+json":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/variants": {
            "get": {
                "summary": "Retrieve a layout view of the text",
                "operationId": "api:variants",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "schema":{
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "List of inscriptions",
                        "content": {
                            "application/xml":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/characters": {
            "get": {
                "summary": "Get list of characters",
                "operationId": "api:characters",
				"parameters": [
					{
						"name": "query",
						"in": "query",
						"schema":{
							"type": "string"
						}
					}
				],
                "responses": {
                    "200":{
                        "description": "List of sites",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },	  
        
        "/api/characters_thumbnails": {
            "get": {
                "summary": "Get list of characters",
                "operationId": "api:characters_thumbnails",
				"parameters": [
					{
						"name": "query",
						"in": "query",
						"schema":{
							"type": "string"
						},
						 "description": "Query"
					}, 
					{
			        "name": "start",
			        "in": "query",
			        "schema": {
			          "type": "string",
			          "default": 1
			        },
			        "description": "Pagination start offset (1-based)"
			      },
			      {
			        "name": "per-page",
			        "in": "query",
			        "schema": {
			          "type": "string",
			          "default": 50
			        },
			        "description": "Number of results per page"
			      }
				],
                "responses": {
                    "200":{
                        "description": "List of sites",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },	
        
        "/bibliography-details": {
			"get": {
				"summary": "Retrieve details of a bibliography entry",
				"description": "Retrieve the HTML representation of a bibliography entry based on its ID.",
				"tags": ["bibliography"],
				"operationId": "custom:bibliography-details",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "ID of the bibliography entry",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML representation of the bibliography entry",
						"content": {
							"text/xml": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "Bibliography entry not found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		 "/biblio-test": {
			"get": {
				"summary": "For testing the XQL code",
				"description": "Retrieve the text of a bibliography entry based on its ID.",
				"tags": ["bibliography"],
				"operationId": "custom:biblio-test",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "ID of the bibliography entry",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "HTML representation of the bibliography entry",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "Bibliography entry not found",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},	
		"/api/persons": {
		    "get": {
		        "summary": "Retrieve sorted list of persons",
		        "description": "Retrieve a sorted and filtered list of persons with optional search and pagination.",
		        "operationId": "custom:persons",
		        "parameters": [
		            {
		                "name": "search",
		                "in": "query",
		                "schema": {
		                    "type": "string"
		                },
		                "description": "Keyword to search for persons."
		            },
		            {
		                "name": "category",
		                "in": "query",
		                "schema": {
		                    "type": "string"
		                },
		                "description": "Filter results by initial character of the sorted name."
		            }
		        ],
	        "responses": {
                "200": {
                    "description": "List of register entries",
                    "content": {
                        "application/json": {
                            "schema":{
                                "type": "object"
                            	}
                            }
                        }
                    }
                }
            }
        },
			
		"/person/{id}": {
			"get": {
			    "summary": "Retrieve the HTML template used for displaying a person",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"operationId": "api:person-info",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of person",
						"required": true,
						"schema": {
							"type": "string",
							"example": "arai"
						},
						"allowReserved": true
					}
				],
			"responses": {
                    "200":{
                        "description": "Person infomation",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },	
		"/api/test-places": {
		    "get": {
		        "summary": "Retrieve sorted list of places",
		        "description": "Retrieve a sorted and filtered list of places with optional search and pagination.",
		        "operationId": "custom:test-places",
		        "parameters": [
		            {
		                "name": "search",
		                "in": "query",
		                "schema": {
		                    "type": "string"
		                },
		                "description": "Keyword to search for places."
		            },
		            {
		                "name": "category",
		                "in": "query",
		                "schema": {
		                    "type": "string",
		                    "default": "all"
		                },
		                "description": "Filter results by type of place."
		            }
		        ],
	        "responses": {
                "200": {
                    "description": "List of places",
                    "content": {
                        "text/html": {
                            "schema":{
                                "type": "string"
                            	}
                            }
                        }
                    }
                }
            }
        },
		"/api/places": {
		    "get": {
		        "summary": "Retrieve sorted list of places",
		        "description": "Retrieve a sorted and filtered list of places with optional search and pagination.",
		        "operationId": "custom:places",
		        "parameters": [
		            {
		                "name": "search",
		                "in": "query",
		                "schema": {
		                    "type": "string"
		                },
		                "description": "Keyword to search for places."
		            },
		            {
		                "name": "category",
		                "in": "query",
		                "schema": {
		                    "type": "string"
		                },
		                "description": "Filter results by type of place."
		            }
		        ],
	        "responses": {
                "200": {
                    "description": "List of register entries",
                    "content": {
                        "application/json": {
                            "schema":{
                                "type": "object"
                            	}
                            }
                        }
                    }
                }
            }
        },

		"/place/{id}/name": {
			"get": {
			    "summary": "Retrieve the HTML template used for displaying a place",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"operationId": "api:place-name",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of place",
						"required": true,
						"schema": {
							"type": "string",
							"example": "Jingshiyu"
						},
						"allowReserved": true
					}
				],
			"responses": {
                    "200":{
                        "description": "place name",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        
        	"/place/{id}/info": {
			"get": {
			    "summary": "Retrieve the HTML template used for displaying a place",
				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
				"operationId": "api:place-info",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of place",
						"required": true,
						"schema": {
							"type": "string",
							"example": "Jingshiyu"
						},
						"allowReserved": true
					}
				],
			"responses": {
                    "200":{
                        "description": "place infomation",
                        "content": {
                            "text/html":{
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        
        "/place/{id}/coordinates": {
		    "get": {
		        "summary": "Getting the coordinates of a place",
		        "description": "This is used for leaflet element",
		        "operationId": "custom:place-coordinates",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
									{
										"name": "id",
										"in": "path",
										"description": "ID of place",
										"required": true,
										"schema": {
											"type": "string",
											"example": "Jingshiyu"
										},
										"allowReserved": true
									}
								],
		        "responses": {
		            "200": {
		                "description": "Coordinates and label for a single place",
		                "content": {
		                    "application/json": {
		                        "schema": {
		                            "type": "object",
		                            "properties": {
		                                    "latitude":{
		                                        "type": "string"
		                                    },
		                                    "longitude":{
		                                        "type": "string"
		                                    },
		                                    "label": {
		                                        "type": "string"
			                                }
			                            }
			                        }
			                    }
			                }
			            }
			        }
			    }			
			},
			  
        "/api/images": {
		    "get": {
		        "summary": "Getting a list of all images",
		        "description": "This will make a list of all images",
		        "operationId": "custom:tei-figures",
				"x-error-handler": "vapi:handle-error",
				"parameters": [
									{
										"name": "search",
										"in": "query",
										"description": "",
										"schema": {
											"type": "string",
											"example": ""
										},
										"allowReserved": true
									}
								],
    			"responses": {
                        "200":{
                            "description": "images",
                            "content": {
                                "text/html":{
                                    "schema": {
                                        "type": "string"
    			                                
			                            }
			                        }
			                    }
			                }
			            }
			        }
	
			},


		"/api/bibliography/json": {
			"get": {
				"summary": "Search for Bibliography",
				"operationId": "api:bibliography",
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "Keyword to search for bibliography titles"
					},
					{
						"name": "start",
						"in": "query",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "language",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of bibliographies",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"count": {
											"type": "integer",
											"description": "Total count of bibliographies matching the query"
										},
										"results": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"biblioID": {
														"type": "string",
														"description": "Bibliography ID"
													},
													"full_reference": {
														"type": "string",
														"description": "Bibliography full reference"
													},
													"copy": {
														"type": "string",
														"description": "The string for clipboard"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},

		"/api/character_new": {
			"get": {
				"summary": "character-table",
				"operationId": "api:characters_new",
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"schema": {
							"type": "string"
						},
						"description": "Keyword to search for characters"
					},
					{
						"name": "start",
						"in": "query",
						"schema": {
							"type": "integer"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "character-table",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"count": {
											"type": "integer",
											"description": "Total count of characters matching the query"
										},
										"results": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"character": {
														"type": "string",
														"description": "The character or symbol."
													  },
													  "image": {
														"type": "string",
														"description": "The URL of the image representing the character."
													  },
													  "title": {
														"type": "string",
														"description": "The title of the inscription, combining both Chinese and English titles."
													  },
													  "source": {
														"type": "string",
														"description": "The source or origin of the character."
													  },
													  "date": {
														"type": "string",
														"description": "The date associated with the character, either as a single point or a range."
													  },
													  "columnrow": {
														"type": "string",
														"description": "The column and row of the character."
													  },
													  "heightwidth": {
														"type": "string",
														"description": "The height and width of the character."
													  },
													  "condition": {
														"type": "string",
														"description": "The condition of the character."
													  }
    												}
    											}
    										}
    									}
    								}
    							}
    						}
    					}
    				}
    			}
    		}
    
        },
    
        "/api/impressum/{id}/": {
    			"get": {
    			    "summary": "Retrieve the HTML template used for displaying the impressum",
    				"description": "Get the HTML template associated with the given document. This is called whenever the users tries to view a document. The actual content of the document will then be loaded by the template.",
    				"operationId": "api:impressum",
    				"x-error-handler": "vapi:handle-error",
    				"parameters": [
    					{
    						"name": "id",
    						"in": "path",
    						"description": "ID of impressum",
    						"required": true,
    						"schema": {
    							"type": "string",
    							"example": "impressum_Shandong_1"
    						},
    						"allowReserved": true
    					}
    				],
    			"responses": {
                        "200":{
                            "description": "impressum page",
                            "content": {
                                "text/html":{
                                    "schema": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
        
    "security": [
        {
            "cookieAuth": []
        },
        {
            "basicAuth": []
        }
    ]
}