<?teipublisher output="web"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:mods="http://www.loc.gov/mods/v3" xmlns:cb="http://www.cbeta.org/ns/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Buddhist Stonesutras in China</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="stonesutras.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2018-09-20+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="stonesutras" source="teipublisher.odd">
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="@type='scroll'" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: var(--bss-color-scroll) !important;
            </outputRendition>
        </model>
                    <model predicate="@type='chapter'" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: var(--bss-color-title) !important;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
            <outputRendition xml:space="preserve">
            color: #a69933;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <modelSequence predicate="@ed='T'">
            <model behaviour="pass-through">
                <param name="n" value="@n"/>
                <param name="link" value="replace(@n, '^(T[^_]+)_(.*)$', '$1_p$2')"/>
                <pb:template xmlns="" xml:space="preserve"><pb-popover class="cblb"><a slot="default" target="_blank" href="https://cbetaonline.dila.edu.tw/zh/[[link]]">|</a><template slot="alternate">[[n]]</template></pb-popover></pb:template>
            </model>
            <model behaviour="inline">
                <param name="content" value="@n"/>
                <pb:template xmlns="" xml:space="preserve"><span data-taisho="[[content]]" class="cbeta"/></pb:template>
            </model>
        </modelSequence>
                    <model behaviour="inline" useSourceRendition="true">
            <param name="content" value="('/', @n, '/')"/>
            <outputRendition xml:space="preserve">
            color: var(--bss-color-gold);
padding-left: .5em;
padding-right: .5em;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="g" mode="change">
                    <model predicate="not(text())" behaviour="glyph">
            <param name="uri" value="@ref"/>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            color: var(--bss-color-red);
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="supplied" mode="change">
                    <model predicate="parent::title" behaviour="inline"/>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            color: #C0C0C0;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="ancestor::back" behaviour="inline"/>
                    <model predicate="@type!='display'" behaviour="omit"/>
                    <model behaviour="note"/>
                </elementSpec>
                <elementSpec ident="ptr" mode="add">
                    <model predicate="starts-with(@target, 'note') and id(@target, root($parameters?root))[@type='display']" behaviour="note">
            <param name="content" value="id(@target, root($parameters?root))"/>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <modelSequence predicate="unclear/@cert">
            <model behaviour="inline">
                <param name="content" value="unclear[@cert = max(../unclear/@cert)]/node()"/>
                <outputRendition xml:space="preserve">
                color: #FF1111;
                </outputRendition>
            </model>
            <model behaviour="note">
                <param name="content" value="('此字漫漶，他本作', unclear[@resp and @cert &lt; 0.5])"/>
            </model>
        </modelSequence>
                    <model predicate="unclear/@cert" behaviour="alternate">
            <param name="default" value="unclear[@cert = max(../unclear/@cert)]"/>
            <param name="alternate" value="('此字漫漶，他本作', unclear)"/>
        </model>
                </elementSpec>
                <elementSpec ident="unclear" mode="change">
                    <model predicate="@cert &lt; 0.5 and @resp and following-sibling::unclear[@cert &lt; 0.5][@resp]" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '“';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '”字;';
            </outputRendition>
        </model>
                    <model predicate="@cert &lt; 0.5 and @resp" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '“';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '”字';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lem" mode="add">
                    <model output="web" behaviour="text">
            <param name="content" value="es:fix-punctuation(.)"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="app" mode="add">
                    <model predicate="$parameters?mode='synopsis' and rdg[starts-with(@wit, 'T_')]" behaviour="inline">
            <param name="content" value="lem"/>
            <outputRendition xml:space="preserve">
            border-bottom: 3px solid #fb3b3b;
            </outputRendition>
        </model>
                    <model predicate="$parameters?mode='synopsis'" behaviour="inline">
            <param name="content" value="lem"/>
        </model>
                    <modelSequence predicate="lem//text() and rdg[@type = 'textcritical']//text() and empty(rdg[@type = 'interpretative'])">
            <desc>Case 1.1, Lemma contains text, reading is type= textcritical and contains text</desc>
            <model predicate="lem" behaviour="inline" cssClass="lemma">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
                <param name="lem" value="lem"/>
                <param name="rdg" value="rdg"/>
                <pb:template xmlns="" xml:space="preserve"><span>石刻本作[[charNote]]“[[lem]]”字，《大正藏》本作“[[rdg]]”字。</span></pb:template>
            </model>
        </modelSequence>
                    <modelSequence predicate="lem//text() and empty(rdg[@type = 'textcritical']//text()) and empty(rdg[@type = 'interpretative'])">
            <desc>Case 1.2, Lemma contains text, textcritical reading does not contain text</desc>
            <model predicate="lem" behaviour="inline" cssClass="lemma">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
                <param name="lem" value="lem"/>
                <param name="rdg" value="rdg"/>
                <pb:template xmlns="" xml:space="preserve">石刻本作[[charNote]]“[[lem]]”字，《大正藏》本此處無字[[rdg]]。</pb:template>
            </model>
        </modelSequence>
                    <modelSequence predicate="empty(lem//text()) and rdg[@type = 'textcritical']//text() and empty(rdg[@type = 'interpretative'])">
            <model behaviour="note" cssClass="lemma">
                <desc>Case 1.3, Lemma contains no text, textcritical reading does</desc>
                <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
                <param name="lem" value="lem"/>
                <param name="rdg" value="rdg"/>
                <pb:template xmlns="" xml:space="preserve"><span>《大正藏》本此處有“[[rdg]]”字。</span></pb:template>
            </model>
        </modelSequence>
                    <modelSequence predicate="lem//text() and rdg[@type = 'interpretative']//text()">
            <desc>Case 2.1, Lemma contains text, interpretative reading as well</desc>
            <model predicate="lem" behaviour="inline" cssClass="lemma">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
                <param name="lem" value="lem"/>
                <param name="rdg" value="rdg"/>
                <pb:template xmlns="" xml:space="preserve"><span>他本作“[[rdg]]“字。</span></pb:template>
            </model>
        </modelSequence>
                    <modelSequence predicate="lem//text() and empty(rdg[@type = 'interpretative']//text()) and empty(rdg[@type = 'textcritical'])">
            <desc>Case 2.2 Lemma contains text, interpretative reading does not contain text</desc>
            <model predicate="lem" behaviour="inline" cssClass="lemma">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
                <param name="lem" value="lem"/>
                <param name="rdg" value="rdg"/>
                <pb:template xmlns="" xml:space="preserve"><span>他本無“[[lem]]”字[[rdg]]。</span></pb:template>
            </model>
        </modelSequence>
                    <model predicate="empty(lem//text()) and exists(rdg[@type = 'interpretative']//text()) and empty(rdg[@type = 'textcritical'])" behaviour="note" cssClass="lemma">
            <desc>Case 2.3, Lemma contains no text, textcritical reading does contain text</desc>
            <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
            <param name="lem" value="lem"/>
            <param name="rdg" value="rdg"/>
            <pb:template xmlns="" xml:space="preserve"><span>他本多“[[rdg]]”字。</span></pb:template>
        </model>
                    <modelSequence predicate="lem//text() and rdg[@type = 'textcritical']//text() and rdg[@type = 'interpretative']//text()">
            <desc>Case 3.2</desc>
            <model predicate="lem" behaviour="inline" cssClass="lemma">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="charNote" value="if (lem//hi[@rend='smaller'] and count(lem/*) = 1) then '小字' else ()"/>
                <param name="lem" value="lem"/>
                <param name="rdgCrit" value="rdg[@type='textcritical']"/>
                <param name="rdgInt" value="rdg[@type='interpretative']"/>
                <pb:template xmlns="" xml:space="preserve"><span>《大正藏》本作：[[rdgCrit]]字。他本作“[[rdgInt]]”字。</span></pb:template>
            </model>
        </modelSequence>
                    <modelSequence>
            <model predicate="lem" behaviour="inline" cssClass="lemma">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="content" value="rdg"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="foreign" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="seg" mode="change">
                    <model predicate="@rend" behaviour="inline"/>
                    <model behaviour="webcomponent" useSourceRendition="true">
            <param name="name" value="'pb-highlight'"/>
            <param name="key" value="substring-after(@n, '.')"/>
            <param name="highlight-self" value="true()"/>
        </model>
                </elementSpec>
                <elementSpec ident="hi" mode="change">
                    <model predicate="@rendition" behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="@rend='bold'" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="@rend='smaller'" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-size: .85em;
            </outputRendition>
        </model>
                    <model predicate="not(@rendition)" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="@type='biblio'" behaviour="link">
            <param name="content" value="let $target := @target return collection('/db/apps/stonesutras/data/biblio')/mods:mods[@ID = $target]/mods:titleInfo[@type = 'reference']"/>
            <param name="link" value="@target"/>
            <outputRendition xml:space="preserve">
            font-variant: small-caps;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="mods:titleInfo" mode="add">
                    <model behaviour="inline">
            <param name="content" value="mods:title[1]/string()"/>
        </model>
                </elementSpec>
            <elementSpec ident="text()" mode="add">
                    <model predicate="$parameters?mode='synoptic'" behaviour="wrap-text"/>
                    <model behaviour="text"/>
                </elementSpec>
            <elementSpec ident="cb:div" mode="add">
                    <model behaviour="section"/>
                </elementSpec>
            <elementSpec ident="rdg" mode="add">
                    <model predicate="starts-with(@wit, 'T_')" behaviour="link">
            <param name="uri" value="let $prev := preceding::lb[@ed='T'][1] return 'https://cbetaonline.dila.edu.tw/zh/' || replace($prev/@n, '^(T[^_]+)_(.*)$', '$1_p$2')"/>
            <param name="target" value="'_blank'"/>
        </model>
                    <model behaviour="inline">
            <param name="content" value="'X'"/>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>