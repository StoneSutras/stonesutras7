<TEI xmlns="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Buddhist Stonesutras in China</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <revisionDesc>
            <change when="2018-09-20+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="stonesutras" source="teipublisher.odd"> <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition>
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition>
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition>
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition>
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
            <outputRendition>
            color: #a69933;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model behaviour="inline" useSourceRendition="true">
            <param name="content" value="@n"/>
            <outputRendition>
            
            display: inline-block;
padding: 3px 7px;
background-color: #337AB7;
margin-right: .5em;
font-size: 0.66em;
color: #f0f0f0;
border-radius: 10px;
line-height: 1;
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="g" mode="change">
                    <model predicate="not(text())" behaviour="glyph">
            <param name="uri" value="@ref"/>
        </model>
                    <model behaviour="inline">
            <outputRendition>
            color: #7C7012;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="supplied" mode="change">
                    <model behaviour="inline">
            <outputRendition>
            color: #C0C0C0;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="ancestor::back" behaviour="inline"/>
                    <model predicate="@type!='display'" behaviour="omit"/>
                    <model behaviour="note"/>
                </elementSpec>
                <elementSpec ident="ptr" mode="add">
                    <model predicate="starts-with(@target, 'note') and id(@target, root($parameters?root))[@type='display']" behaviour="note">
            <param name="content" value="id(@target, root($parameters?root))"/>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <modelSequence predicate="unclear/@cert" behaviour="inline">
            <model behaviour="inline">
                <param name="content" value="unclear[@cert = max(../unclear/@cert)]/node()"/>
                <outputRendition>
                color: #FF1111;
                </outputRendition>
            </model>
            <model behaviour="note">
                <param name="content" value="('此字漫漶，他本作', unclear)"/>
            </model>
        </modelSequence>
                    <model predicate="unclear/@cert" behaviour="alternate">
            <param name="default" value="unclear[@cert = max(../unclear/@cert)]"/>
            <param name="alternate" value="('此字漫漶，他本作', unclear)"/>
        </model>
                </elementSpec>
                <elementSpec ident="unclear" mode="change">
                    <model predicate="@cert &lt; 0.5 and @resp and following-sibling::unclear[@cert &lt; 0.5][@resp]" behaviour="inline">
            <outputRendition scope="before">
            content: '“';
            </outputRendition>
            <outputRendition scope="after">
            content: '”字;';
            </outputRendition>
        </model>
                    <model predicate="@cert &lt; 0.5 and @resp" behaviour="inline">
            <outputRendition scope="before">
            content: '“';
            </outputRendition>
            <outputRendition scope="after">
            content: '”字';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="app" mode="add">
                    <modelSequence behaviour="inline">
            <model predicate="lem" behaviour="inline">
                <param name="content" value="lem"/>
            </model>
            <model behaviour="note">
                <param name="content" value="rdg"/>
            </model>
        </modelSequence>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>